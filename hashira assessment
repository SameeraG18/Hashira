// Sample input JSON as string (replace this with any test case)
const jsonStr = `
{
  "keys": {
    "n": 4,
    "k": 3
  },
  "1": {
    "base": "10",
    "value": "4"
  },
  "2": {
    "base": "2",
    "value": "111"
  },
  "3": {
    "base": "10",
    "value": "12"
  },
  "6": {
    "base": "4",
    "value": "213"
  }
}
`;

// Convert string number in given base to Number
function baseToNumber(str, base) {
  const digits = '0123456789abcdefghijklmnopqrstuvwxyz';
  let num = 0;
  for (const c of str.toLowerCase()) {
    let digit = digits.indexOf(c);
    if (digit === -1 || digit >= base) {
      throw new Error(`Invalid digit '${c}' for base ${base}`);
    }
    num = num * base + digit;
  }
  return num;
}

// Solve system Ax = b using Gaussian elimination
function gaussSolve(A, b) {
  const n = b.length;
  for (let i = 0; i < n; i++) {
    // Partial pivot
    let maxRow = i;
    for (let r = i + 1; r < n; r++) {
      if (Math.abs(A[r][i]) > Math.abs(A[maxRow][i])) maxRow = r;
    }
    if (maxRow !== i) {
      [A[i], A[maxRow]] = [A[maxRow], A[i]];
      [b[i], b[maxRow]] = [b[maxRow], b[i]];
    }

    // Eliminate below
    for (let r = i + 1; r < n; r++) {
      let f = A[r][i] / A[i][i];
      for (let c = i; c < n; c++) {
        A[r][c] -= f * A[i][c];
      }
      b[r] -= f * b[i];
    }
  }

  // Back substitution
  let x = new Array(n);
  for (let i = n - 1; i >= 0; i--) {
    let sum = b[i];
    for (let j = i + 1; j < n; j++) {
      sum -= A[i][j] * x[j];
    }
    x[i] = sum / A[i][i];
  }
  return x;
}

// Main function
function main() {
  const data = JSON.parse(jsonStr);
  const k = data.keys.k;

  // Extract y values (converted to Number)
  const y = [];
  for (let i = 1; i <= k; i++) {
    const obj = data[i.toString()];
    if (!obj) {
      throw new Error(`Missing key '${i}'`);
    }
    const base = parseInt(obj.base);
    const val = obj.value;
    y.push(baseToNumber(val, base));
  }

  // Build Vandermonde matrix for x = 1..k
  const A = [];
  for (let i = 0; i < k; i++) {
    const row = [];
    for (let pow = k - 1; pow >= 0; pow--) {
      row.push(Math.pow(i + 1, pow));
    }
    A.push(row);
  }

  // Solve for coefficients
  const coeff = gaussSolve(A, y);

  // Constant term is last coefficient
  const constantTerm = coeff[coeff.length - 1];
  console.log("Constant term (c) =", constantTerm);
}

main();
